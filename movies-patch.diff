diff --git a/graphics/video/codecs/indeo3.cpp b/graphics/video/codecs/indeo3.cpp
new file mode 100644
index 0000000..e38aa00
--- /dev/null
+++ b/graphics/video/codecs/indeo3.cpp
@@ -0,0 +1,101 @@
+/* ScummVM - Graphic Adventure Engine
+ *
+ * ScummVM is the legal property of its developers, whose names
+ * are too numerous to list here. Please refer to the COPYRIGHT
+ * file distributed with this source distribution.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version 2
+ * of the License, or (at your option) any later version.
+
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
+ *
+ * $URL$
+ * $Id$
+ *
+ */
+
+#include "common/system.h"
+
+#include "graphics/video/codecs/indeo3.h"
+#include "graphics/dither.h"
+#include "graphics/video/coktelvideo/indeo3.h"
+
+namespace Graphics {
+
+Indeo3Decoder::Indeo3Decoder(uint16 width, uint16 height) {
+	_surface = new Graphics::Surface();
+	_surface->create(width, height, 1);
+
+	_palLUT = new PaletteLUT(5, PaletteLUT::kPaletteYUV);
+
+	// Creating a standard palette
+	for (int r = 0; r < 8; r++) {
+		for (int g = 0; g < 8; g++) {
+			for (int b = 0; b < 4; b++) {
+				int n = (r << 5 | g << 2 | b) * 3;
+				_palette[n + 0] = r * 31;
+				_palette[n + 1] = g * 31;
+				_palette[n + 2] = b * 63;
+			}
+		}
+	}
+
+	_paletteSet = false;
+
+	_palLUT->setPalette(_palette, PaletteLUT::kPaletteRGB, 8);
+
+	_indeo3 = new Indeo3(width, height, _palLUT);
+}
+
+Indeo3Decoder::~Indeo3Decoder() {
+	delete _indeo3;
+	delete _palLUT;
+
+	_surface->free();
+	delete _surface;
+}
+
+Surface *Indeo3Decoder::decodeImage(Common::SeekableReadStream *stream) {
+	uint32 size = stream->size();
+	byte  *data = new byte[size];
+
+	if (stream->read(data, size) != size)
+		return 0;
+
+	if (!_indeo3->decompressFrame(data, size, (byte *) _surface->pixels, _surface->w, _surface->h))
+		return 0;
+
+	if (!_paletteSet)
+		setSystemPalette(_palette);
+
+	return _surface;
+}
+
+void Indeo3Decoder::setSystemPalette(const byte *palette) {
+	byte sysPal[1024];
+
+	const byte *mPal = palette;
+	byte *sPal = sysPal;
+
+	for (int i = 0 ; i < 256; i++, mPal += 3, sPal += 4) {
+		sPal[0] = mPal[0];
+		sPal[1] = mPal[1];
+		sPal[2] = mPal[2];
+		sPal[3] = 255;
+	}
+
+	g_system->setPalette(sysPal, 0, 256);
+
+	_paletteSet = true;
+}
+
+} // End of namespace Graphics
diff --git a/graphics/video/codecs/indeo3.h b/graphics/video/codecs/indeo3.h
new file mode 100644
index 0000000..dd346dc
--- /dev/null
+++ b/graphics/video/codecs/indeo3.h
@@ -0,0 +1,57 @@
+/* ScummVM - Graphic Adventure Engine
+ *
+ * ScummVM is the legal property of its developers, whose names
+ * are too numerous to list here. Please refer to the COPYRIGHT
+ * file distributed with this source distribution.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version 2
+ * of the License, or (at your option) any later version.
+
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
+ *
+ * $URL$
+ * $Id$
+ *
+ */
+
+#ifndef GRAPHICS_INDEO3_H
+#define GRAPHICS_INDEO3_H
+
+#include "graphics/video/codecs/codec.h"
+
+namespace Graphics {
+
+class PaletteLUT;
+class Indeo3;
+
+class Indeo3Decoder : public Codec {
+public:
+	Indeo3Decoder(uint16 width, uint16 height);
+	~Indeo3Decoder();
+
+	Surface *decodeImage(Common::SeekableReadStream *stream);
+
+private:
+	Surface *_surface;
+
+	PaletteLUT *_palLUT;
+	Indeo3 *_indeo3;
+
+	byte _palette[768];
+	bool _paletteSet;
+
+	void setSystemPalette(const byte *palette);
+};
+
+} // End of namespace Graphics
+
+#endif
diff --git a/graphics/video/codecs/msrle.cpp b/graphics/video/codecs/msrle.cpp
new file mode 100644
index 0000000..6409943
--- /dev/null
+++ b/graphics/video/codecs/msrle.cpp
@@ -0,0 +1,133 @@
+/* ScummVM - Graphic Adventure Engine
+ *
+ * ScummVM is the legal property of its developers, whose names
+ * are too numerous to list here. Please refer to the COPYRIGHT
+ * file distributed with this source distribution.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version 2
+ * of the License, or (at your option) any later version.
+
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
+ *
+ * $URL$
+ * $Id$
+ *
+ */
+
+// Based off ffmpeg's msrledec.c
+
+#include "graphics/video/codecs/msrle.h"
+
+namespace Graphics {
+
+MSRLEDecoder::MSRLEDecoder(uint16 width, uint16 height, byte bitsPerPixel) {
+	_surface = new Graphics::Surface();
+	_surface->create(width, height, 1);
+	_bitsPerPixel = bitsPerPixel;
+}
+
+MSRLEDecoder::~MSRLEDecoder() {
+	_surface->free();
+	delete _surface;
+}
+
+Surface *MSRLEDecoder::decodeImage(Common::SeekableReadStream *stream) {
+	if (_bitsPerPixel == 8) {
+		decode8(stream);
+	} else
+		error("Unhandled %d bit Microsoft RLE encoding", _bitsPerPixel);
+
+	return _surface;
+}
+
+void MSRLEDecoder::decode8(Common::SeekableReadStream *stream) {
+
+	int x = 0;
+	int y = _surface->h - 1;
+
+	byte *data = (byte *) _surface->pixels;
+	uint16 width  = _surface->w;
+	uint16 height = _surface->h;
+
+	byte *output     = data + ((height - 1) * width);
+	byte *output_end = data + ((height)     * width);
+
+	while (!stream->eos()) {
+		byte count = stream->readByte();
+		byte value = stream->readByte();
+
+		if (count == 0) {
+			if (value == 0) {
+				// End of line
+
+				x = 0;
+				y--;
+				output = data + (y * width);
+
+				if (y < 0) {
+					warning("Next line is beyond picture bounds");
+					return;
+				}
+
+			} else if (value == 1) {
+				// End of image
+
+				return;
+			} else if (value == 2) {
+				// Skip
+
+				count = stream->readByte();
+				value = stream->readByte();
+
+				y -= value;
+				x += count;
+
+				if (y < 0) {
+					warning("Skip beyond picture bounds");
+					return;
+				}
+
+				output = data + ((y * width) + x);
+
+			} else {
+				// Copy data
+
+				if (output + value > output_end) {
+					stream->skip(value);
+					continue;
+				}
+
+				for (int i = 0; i < value; i++)
+					*output++ = stream->readByte();
+
+				if (value & 1)
+					stream->skip(1);
+
+				x += value;
+			}
+
+		} else {
+			// Run data
+
+			if (output + count > output_end)
+				continue;
+
+			for (int i = 0; i < count; i++, x++)
+				*output++ = value;
+		}
+
+	}
+
+	warning("No end-of-picture code");
+}
+
+} // End of namespace Graphics
diff --git a/graphics/video/codecs/msrle.h b/graphics/video/codecs/msrle.h
new file mode 100644
index 0000000..634fe75
--- /dev/null
+++ b/graphics/video/codecs/msrle.h
@@ -0,0 +1,50 @@
+/* ScummVM - Graphic Adventure Engine
+ *
+ * ScummVM is the legal property of its developers, whose names
+ * are too numerous to list here. Please refer to the COPYRIGHT
+ * file distributed with this source distribution.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version 2
+ * of the License, or (at your option) any later version.
+
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
+ *
+ * $URL$
+ * $Id$
+ *
+ */
+
+#ifndef GRAPHICS_MSRLE_H
+#define GRAPHICS_MSRLE_H
+
+#include "graphics/video/codecs/codec.h"
+
+namespace Graphics {
+
+class MSRLEDecoder : public Codec {
+public:
+	MSRLEDecoder(uint16 width, uint16 height, byte bitsPerPixel);
+	~MSRLEDecoder();
+
+	Surface *decodeImage(Common::SeekableReadStream *stream);
+
+private:
+	byte _bitsPerPixel;
+
+	Surface *_surface;
+
+	void decode8(Common::SeekableReadStream *stream);
+};
+
+} // End of namespace Graphics
+
+#endif
diff --git a/graphics/module.mk b/graphics/module.mk
index 97fff5a..dbe55c2 100644
--- a/graphics/module.mk
+++ b/graphics/module.mk
@@ -28,6 +28,8 @@ MODULE_OBJS := \
 	video/smk_decoder.o \
 	video/video_player.o \
 	video/codecs/msvideo1.o \
+	video/codecs/msrle.o \
+	video/codecs/indeo3.o \
 	video/coktelvideo/indeo3.o \
 	video/coktelvideo/coktelvideo.o
 
diff --git a/graphics/video/avi_decoder.cpp b/graphics/video/avi_decoder.cpp
index 795c0f3..ddbc93e 100644
--- a/graphics/video/avi_decoder.cpp
+++ b/graphics/video/avi_decoder.cpp
@@ -36,6 +36,8 @@
 
 // Codecs
 #include "graphics/video/codecs/msvideo1.h"
+#include "graphics/video/codecs/msrle.h"
+#include "graphics/video/codecs/indeo3.h"
 
 namespace Graphics {
 
@@ -324,7 +326,8 @@ Surface *AviDecoder::getNextFrame() {
 		_fileStream->read(data, chunkSize);
 		_audStream->queueBuffer(data, chunkSize);
 		_fileStream->skip(chunkSize & 1); // Alignment
-	} else if (getStreamType(nextTag) == 'dc' || getStreamType(nextTag) == 'id' || getStreamType(nextTag) == 'AM') {		
+	} else if (getStreamType(nextTag) == 'dc' || getStreamType(nextTag) == 'id' ||
+	           getStreamType(nextTag) == 'AM' || getStreamType(nextTag) == '32') {
 		// Compressed Frame
 		_videoInfo.currentFrame++;
 		uint32 chunkSize = _fileStream->readUint32LE();
@@ -417,6 +420,10 @@ Codec *AviDecoder::createCodec() {
 		case ID_MSVC:
 		case ID_WHAM:
 			return new MSVideo1Decoder(_bmInfo.width, _bmInfo.height, _bmInfo.bitCount);
+		case ID_RLE :
+			return new MSRLEDecoder(_bmInfo.width, _bmInfo.height, _bmInfo.bitCount);
+		case ID_IV32:
+			return new Indeo3Decoder(_bmInfo.width, _bmInfo.height);
 		default:
 			warning ("Unknown/Unhandled compression format \'%s\'", tag2str(_vidsHeader.streamHandler));
 	}
diff --git a/graphics/video/codecs/indeo3.cpp b/graphics/video/codecs/indeo3.cpp
index e38aa00..3d91031 100644
--- a/graphics/video/codecs/indeo3.cpp
+++ b/graphics/video/codecs/indeo3.cpp
@@ -68,15 +68,20 @@ Surface *Indeo3Decoder::decodeImage(Common::SeekableReadStream *stream) {
 	uint32 size = stream->size();
 	byte  *data = new byte[size];
 
-	if (stream->read(data, size) != size)
+	if (stream->read(data, size) != size) {
+		delete[] data;
 		return 0;
+	}
 
-	if (!_indeo3->decompressFrame(data, size, (byte *) _surface->pixels, _surface->w, _surface->h))
+	if (!_indeo3->decompressFrame(data, size, (byte *) _surface->pixels, _surface->w, _surface->h)) {
+		delete[] data;
 		return 0;
+	}
 
 	if (!_paletteSet)
 		setSystemPalette(_palette);
 
+	delete[] data;
 	return _surface;
 }
 
